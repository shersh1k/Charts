!function(t){var e={};function i(a){if(e[a])return e[a].exports;var s=e[a]={i:a,l:!1,exports:{}};return t[a].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,a){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(a,s,function(e){return t[e]}.bind(null,s));return a},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t){t.exports=[{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",37,20,32,39,32,35,19,65,36,62,113,69,120,60,51,49,71,122,149,69,57,21,33,55,92,62,47,50,56,116,63,60,55,65,76,33,45,64,54,81,180,123,106,37,60,70,46,68,46,51,33,57,75,70,95,70,50,68,63,66,53,38,52,109,121,53,36,71,96,55,58,29,31,55,52,44,126,191,73,87,255,278,219,170,129,125,126,84,65,53,154,57,71,64,75,72,39,47,52,73,89,156,86,105,88,45,33,56,142,124,114,64],["y1",22,12,30,40,33,23,18,41,45,69,57,61,70,47,31,34,40,55,27,57,48,32,40,49,54,49,34,51,51,51,66,51,94,60,64,28,44,96,49,73,30,88,63,42,56,67,52,67,35,61,40,55,63,61,105,59,51,76,63,57,47,56,51,98,103,62,54,104,48,41,41,37,30,28,26,37,65,86,70,81,54,74,70,50,74,79,85,62,36,46,68,43,66,50,28,66,39,23,63,74,83,66,40,60,29,36,27,54,89,50,73,52]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",6706,7579,7798,8307,7866,7736,7816,7630,7536,7105,7178,7619,7917,7483,5772,5700,5435,4837,4716,4890,4753,4820,4538,12162,39444,25765,18012,14421,13249,11310,10377,9399,8917,8259,7902,9442,47596,36160,23866,18500,15488,13722,12270,13413,10574,7092,7159,7880,8821,8306,7780,7963,7837,7611,7334,7413,7015,6742,6557,6593,6680,6725,6345,5988,6365,9911,28833,19694,14873,11911,10498,9708,8893,8365,7960,7694,45529,42858,31508,23289,19147,15874,14551,13124,11778,10809,10522,9918,9436,8617,8765,8194,8035,7865,7573,7422,7047,7147,6861,6669,6363,12073,32381,21390,15311,12819,11655,10696,9678,9143,8296,7852],["y1",3522,4088,4146,4477,4202,4157,4177,4203,4223,3948,3946,3898,3979,4052,3279,3229,3302,3040,3054,2982,3077,2965,2973,5148,22485,13077,9055,7446,6824,5995,5787,5367,4997,4689,4630,4785,22365,15244,10626,8666,7681,6929,6219,6367,5402,4932,4844,5146,5265,4887,4714,4722,4718,4693,4746,4819,4455,4419,4323,4407,4277,11589,6100,5076,4769,8929,14002,9756,7520,6343,5633,5415,5052,4850,4624,4480,14102,24005,14263,10845,9028,7755,7197,7001,6737,6254,6150,5922,5603,5048,5423,5003,5035,4747,4814,4661,4462,4516,4221,4111,4053,12515,15781,10499,8175,6831,6287,5990,5590,5148,4760,4809]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",4747,4849,5045,5184,5746,5400,5424,5576,6436,5337,4840,5379,4678,4736,5074,4897,4349,5089,4543,5033,5047,4871,4812,4723,4545,4723,4721,4384,4277,4682,4805,4001,4610,5241,5113,4059,4529,4673,5291,5154,5123,5535,5540,5161,5666,5584,6999,6854,5083,5361,5863,5792,5586,6106,5481,5532,5853,5809,6244,6156,5596,5426,5422,5413,4795,5113,5279,5530,4939,4983,4984,5527,5765,5001,5818,6061,5956,5288,5837,5703,5440,5238,5957,6432,6389,6064,7065,5981,5779,6567,6320,5634,6023,5702,6066,5797,6163,6182,4906,5637,7073,6679,5831,6015,6266,6128,6156,6218,6050,6140,5877,7147],["y1",4605,5036,4956,5168,5008,5069,5223,5360,5695,5209,4796,5028,4931,5123,4987,4964,4982,5037,5050,5144,5049,4971,4911,4792,4562,4597,4759,4761,4646,4543,4597,4428,4213,4270,3961,4784,4699,4711,4855,4717,4563,4923,5041,4895,4877,5001,5410,5033,5045,5184,4976,5207,5354,5205,4887,4831,5083,5148,5369,5176,5022,4880,4969,5135,4836,4764,4782,4783,4646,4755,4744,4932,5059,4851,4614,4718,5018,5034,5223,5007,4839,4763,4761,5048,5330,5106,5956,5135,5006,4919,5511,5114,5122,5314,5089,5022,4918,4986,4626,4675,4951,4921,5173,5145,5209,4967,5030,5120,5030,4946,4795,5224]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",41,31,62,65,66,79,52,26,42,68,71,86,65,54,33,70,52,68,75,92,69,28,33,84,65,56,42,44,26,34,45,49,83,83,66,31,43,55,57,55,54,45,51,64,27,19,38,38,44,49,42,50,60,73,86,65,51,54,48,61,82,83,53,52,48,64,96,103,68,73,58,42,81,80,76,106,93,65,69,104,75,79,92,73,49,63,76,79,83,70,55,47,42,111,93,74,99,107,52,65,80,82,74,154,106,39,40,77,85,66,52,25],["y1",19,10,36,41,28,39,24,16,14,40,39,37,47,28,16,32,25,29,36,45,38,11,25,37,35,22,25,30,16,20,32,34,37,26,31,10,19,32,34,23,25,22,21,18,11,18,18,23,11,18,22,19,27,27,30,25,27,23,28,30,23,31,27,16,30,21,36,33,25,34,16,24,37,33,26,24,31,21,37,32,35,31,30,27,15,17,38,40,32,34,30,17,21,28,36,30,24,25,20,24,22,42,34,47,40,29,29,31,39,30,29,18]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15200352e5,15201216e5,1520208e6,15202944e5,15203808e5,15204672e5,15205536e5,152064e7,15207264e5,15208128e5,15208992e5,15209856e5,1521072e6,15211584e5,15212448e5,15213312e5,15214176e5,1521504e6,15215904e5,15216768e5,15217632e5,15218496e5,1521936e6,15220224e5,15221088e5,15221952e5,15222816e5,1522368e6,15224544e5,15225408e5,15226272e5,15227136e5,15228e8,15228864e5,15229728e5,15230592e5,15231456e5,1523232e6,15233184e5,15234048e5,15234912e5,15235776e5,1523664e6,15237504e5,15238368e5,15239232e5,15240096e5,1524096e6,15241824e5,15242688e5,15243552e5,15244416e5,1524528e6,15246144e5,15247008e5,15247872e5,15248736e5,152496e7,15250464e5,15251328e5,15252192e5,15253056e5,1525392e6,15254784e5,15255648e5,15256512e5,15257376e5,1525824e6,15259104e5,15259968e5,15260832e5,15261696e5,1526256e6,15263424e5,15264288e5,15265152e5,15266016e5,1526688e6,15267744e5,15268608e5,15269472e5,15270336e5,152712e7,15272064e5,15272928e5,15273792e5,15274656e5,1527552e6,15276384e5,15277248e5,15278112e5,15278976e5,1527984e6,15280704e5,15281568e5,15282432e5,15283296e5,1528416e6,15285024e5,15285888e5,15286752e5,15287616e5,1528848e6,15289344e5,15290208e5,15291072e5,15291936e5,152928e7,15293664e5,15294528e5,15295392e5,15296256e5,1529712e6,15297984e5,15298848e5,15299712e5,15300576e5,1530144e6,15302304e5,15303168e5,15304032e5,15304896e5,1530576e6,15306624e5,15307488e5,15308352e5,15309216e5,1531008e6,15310944e5,15311808e5,15312672e5,15313536e5,153144e7,15315264e5,15316128e5,15316992e5,15317856e5,1531872e6,15319584e5,15320448e5,15321312e5,15322176e5,1532304e6,15323904e5,15324768e5,15325632e5,15326496e5,1532736e6,15328224e5,15329088e5,15329952e5,15330816e5,1533168e6,15332544e5,15333408e5,15334272e5,15335136e5,15336e8,15336864e5,15337728e5,15338592e5,15339456e5,1534032e6,15341184e5,15342048e5,15342912e5,15343776e5,1534464e6,15345504e5,15346368e5,15347232e5,15348096e5,1534896e6,15349824e5,15350688e5,15351552e5,15352416e5,1535328e6,15354144e5,15355008e5,15355872e5,15356736e5,153576e7,15358464e5,15359328e5,15360192e5,15361056e5,1536192e6,15362784e5,15363648e5,15364512e5,15365376e5,1536624e6,15367104e5,15367968e5,15368832e5,15369696e5,1537056e6,15371424e5,15372288e5,15373152e5,15374016e5,1537488e6,15375744e5,15376608e5,15377472e5,15378336e5,153792e7,15380064e5,15380928e5,15381792e5,15382656e5,1538352e6,15384384e5,15385248e5,15386112e5,15386976e5,1538784e6,15388704e5,15389568e5,15390432e5,15391296e5,1539216e6,15393024e5,15393888e5,15394752e5,15395616e5,1539648e6,15397344e5,15398208e5,15399072e5,15399936e5,154008e7,15401664e5,15402528e5,15403392e5,15404256e5,1540512e6,15405984e5,15406848e5,15407712e5,15408576e5,1540944e6,15410304e5,15411168e5,15412032e5,15412896e5,1541376e6,15414624e5,15415488e5,15416352e5,15417216e5,1541808e6,15418944e5,15419808e5,15420672e5,15421536e5,154224e7,15423264e5,15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5,15520896e5],["y0",2298660,2253410,2515820,2506600,2460240,2408400,2317430,2240100,2295900,2609800,2594200,2626400,2615e3,2617800,2394500,2391100,2608300,2676e3,2637700,2766600,3186500,3067700,2570700,2935e3,2949200,2913500,2763600,3216300,2343500,2361e3,258e4,2591800,2595200,2569500,2587700,2372500,2351200,2465600,2625100,2651300,2686700,2783300,2417400,2383800,2736300,2751100,2678900,2622300,2586e3,2365700,2407700,2541300,2600400,2581500,2576200,2550100,2334500,2139400,2015400,2019900,2210100,2191800,2240700,2107400,2026900,2258e3,2255200,2123200,2267800,2236100,2065700,2093300,2315300,2333200,2349800,2318300,2275e3,2110300,2077100,2335200,2357400,235e4,2293800,2303600,2118700,2100300,2219700,2361100,2349500,2347800,2318400,2141600,2178600,2432500,2448700,2440300,2450100,2424100,2229900,2152400,2402600,2401e3,2418100,2408600,2408400,2212600,2189e3,2450800,2444500,2451900,2451e3,2442600,2287900,2221100,2451900,2460200,2460900,2319900,2270300,2183800,2195300,2485e3,2460900,2500600,2495300,2479100,2290600,2235800,2459900,2484500,2491e3,2525600,2477300,2223700,2146700,2528200,2567800,2556300,2540700,2503e3,2301200,2251600,2538600,2596500,2553900,2534200,2527300,2337400,2332900,2688500,2585700,2559600,2651600,2586800,2445700,2472300,2633e3,2664600,2649400,2648900,2644600,2406400,2426200,2694e3,2740600,2711800,2700900,2645800,2422800,2438500,2697500,2712500,2690300,2684400,2517300,2435300,2444300,2781800,2807800,2804500,2771300,2798800,2633300,2597100,2946300,2889800,2949600,2951400,2928800,2701400,2709900,3012900,3019100,2977200,3012400,2989800,2752100,2749100,3033300,3050400,3023800,3066400,3047800,2792200,2799300,3096100,3132500,3082400,3071200,3021400,2818300,2737500,3037800,3123700,3138900,3181800,3118500,2834500,2826900,3171e3,3175900,3184300,3195800,3129100,2834100,2876800,3019e3,3214e3,3227900,3189600,3187800,2886800,2880500,3218200,3253700,3260400,3243300,3204e3,2962700,2968600,3282100,3618900,3017e3,3037300,3044500,2758900,2784600,3032900,3132400,3075800,3108200,3076200,2851800,2837800,3107500,3146800,3145100,3145300,3158400,2872100,2823800,3190400,3209300,3170800,3195300,3183e3,2910300,2937400,3297100,3293600,3278400,3234200,3224e3,3013900,2955300,3303900,3323300,3352600,3348400,3340600,3110600,3066400,3409200,3462100,3394200,3383100,3433700,3184e3,3092700,3417400,4505200,3094500,3106100,3083200,3005600,2866700,2984100,2954200,3086800,3070500,3040900,2903500,3592500,3316200,2930500,2961900,3009600,3027200,2871600,2831600,2881700,3054200,3116600,3120800,3157300,2950700,2982700,3192800,3223300,3219500,3235900,3214100,3004400,2963500,3280400,3262400,3256e3,3258400,3264900,3107500,3057400,3326600,3332400,3357e3,3365100,3359500,3127400,3130200,3367100,3422700,3436400,3431100,36e5,3146100,3170900,3467300,3483400,3473600,3454700,3390200,3213600,3188800,3498200,3498600,3493500,3478900,3446400,3239200,3229100,3559600,3563600,3549800,3577300,3524400,3282500,3271300,3599200,3575200,3554400,3540300,3450600,2812e3],["y1",1130400,1065370,1211030,1215590,1206540,1206720,1085450,1047320,1071720,1253170,1261050,1264660,1260240,1264840,1130440,1121660,1294120,1290780,1284540,1302860,1296810,1165450,1128830,1302070,1304470,1307090,1268e3,1302160,1159330,1163530,1327140,1320680,1319200,1306810,1287990,1121240,1145070,1132400,1310310,1329340,1340060,1333530,1167040,1153260,1356930,1366500,1375970,1378570,1357460,1192240,1188650,1386450,1400570,1395730,1404160,1378120,1195410,1082e3,1189660,1197540,1367850,1389070,1386300,1282240,1209450,1409070,1409450,1271120,1424860,1399990,1240640,1248530,1451770,1460240,1466100,1460990,1446730,1268830,1263270,1473530,1476230,1480760,1460520,1454730,1263910,1227240,1303900,1474760,1473400,1477380,1466790,1285620,1280100,1491820,1499660,1496260,1485990,1473140,1301290,1273440,1487420,1494560,1500790,1508660,1489400,1301960,1297680,1501170,1503e3,1488980,1501170,1479060,1367980,1296050,1493920,1487830,1479120,1338410,1318550,1266620,1285640,1487970,1489080,1489580,1475400,1471140,1316010,1271940,1476160,1480670,1491030,1480940,1477640,1305750,1296770,1483400,1494440,1495740,1485900,1484400,1319160,1284010,1488140,1502910,1503450,1485410,1498200,1323200,1303150,1506840,1523440,1521490,1516770,1504300,1327520,1307630,1518100,1521370,1521280,1521660,1517700,1349880,1333010,1543800,1553730,1546490,1541710,1532690,1367020,1354040,1560080,1564990,1565050,1561110,1406570,1340850,1368550,1600180,1630760,1621360,1636580,1652580,1489550,1465750,1731080,1730190,1732260,1730210,1724800,1519480,1520490,1758280,1774530,1770690,1781100,1762270,1551690,1541620,1787290,1795490,1802940,1799130,1778850,1560040,1564580,1822410,1819680,1812390,1814100,1798060,1587880,1589320,1833920,1843420,1851460,1845550,1822980,1596860,1595900,1866e3,1860480,1862600,1863950,1827540,1585280,1588970,1683930,1879500,1883300,1879040,1846160,1639090,1632580,1895780,1897620,1906e3,1906730,1895290,1670120,1670190,1914360,1932890,1933160,1921800,1898720,1673530,1685190,1937730,1951850,1949900,1949020,1923160,1718450,1704040,1964800,1975140,2002510,1985340,1959ey2",820900,766050,894390,894540,887590,814490,786610,744660,770920,930330,930190,942060,933690,922280,810770,809760,952010,959070,957020,955890,948250,825710,804970,958480,959090,970200,907010,950150,825240,820890,971020,973560,967940,960360,931820,795020,753860,808740,97e4,981020,979810,975840,829690,819300,992290,998040,1006540,1013790,995130,848190,851890,1024210,1032210,1032290,1027510,1010090,850110,741740,844400,850410,1006690,1018470,1011630,916990,861050,1039650,1032640,904200,1045560,1022330,888970,896300,1073460,1074860,1074820,1074880,1057340,909410,906710,1078860,1092760,1083360,1078680,1067310,903090,858360,947540,1089590,1095060,1093130,1070660,915380,916530,1108410,1109460,1097230,1094520,1074630,915520,915750,1101730,1104580,1107930,1116850,1106360,928500,928210,1110530,1103230,1099970,1106180,1096060,982050,932620,1100880,1099970,1080040,959480,951360,902160,916070,1094120,1092530,1089290,1081760,1073320,937320,900010,1084910,1082620,1080960,1074050,1077810,925090,913970,1082900,1089240,1088890,1088720,1084170,938750,904060,1091540,1093660,1104520,1085860,1091880,939720,919790,1098590,1110310,1105580,1105220,1096580,940670,923480,1102360,1102760,1102280,1108680,1109210,955490,944730,1125380,1127440,1123070,1123910,1121160,966340,946940,1141980,1146790,1147420,1132920,990870,946370,964610,1171550,1187e3,1186370,1199100,1213ee3,1401510,1189880,1309810,1380230,1383630,1254140,1216830,1243860,1442240,1481680,1480680,1490700,1315410,1300930,1530520,1532340,1539150,1541510,1532770,1344910,1325530,1563330,1568490,1580110,1575130,1564880,1369810,1359060,1608230,1605640,1605970,1601640,1590810,1381740,1375190,1625850,1621800,1629910,1628510,1609760,1397880,1392180,1647700,1646770,1644200,1667150,1610910,1408450,1395010,1652870,1658870,1660310,1659060,1629490,1435450,1407720,1675610,1682450,1682070,1693010,1669030,1448500,1439490,1710110,1702690,1707e3,1662770,1512800,1101660],["y3",409540,377260,456380,460230,452020,389350,397230,369e3,382180,473570,477470,477550,478030,466150,397480,406380,494570,494680,482810,487700,475090,400520,397940,484160,487740,493260,434500,475410,398650,404690,491980,493410,485250,484740,465490,377460,353960,396390,493300,497560,495110,485260,394770,402910,500540,506260,509680,514010,494350,405360,412560,513030,521320,515730,518170,499850,394960,328510,406450,408080,501980,507800,496990,442530,414260,525770,513440,442660,526810,500190,426220,436110,546820,543480,545420,540530,527770,431050,443100,549550,551600,548120,542290,528810,435370,407250,463200,553640,554110,555820,536470,440460,447740,563330,561850,556430,550910,539440,441200,442310,563100,563760,559230,570870,555280,447750,455570,564630,562510,556050,555560,556470,484080,451320,561060,553630,540660,473500,472500,438550,447590,548670,549580,539920,541510,540380,450260,432260,535950,545160,543810,536990,539680,446570,444470,543450,549070,547840,541430,540200,450080,431800,549290,545890,556300,536500,543890,450890,440180,550850,554740,553460,553440,546420,446710,436640,553270,547750,551920,547610,545500,449220,447510,560050,561560,561560,556630,559340,461630,456300,569070,574800,575220,566180,472200,450530,462960,590290,597250,592970,604870,613050,512200,495980,649860,645070,636950,647120,630390,518820,525990,661700,659770,660650,669560,644510,529610,539520,673850,668530,673770,669480,654540,536090,548400,690100,684900,687040,685940,666360,560140,553050,696740,694490,703e3,697980,674460,548230,557370,697150,700110,701170,695810,669780,543500,540170,597430,711500,699770,698520,682170,568380,572950,715580,716050,720770,720660,695220,572970,578170,722280,724280,727910,719820,699840,580870,586270,729850,733680,726590,731270,709330,593070,600500,743590,743690,767660,747140,730510,607540,610480,762440,772960,763480,758490,741090,614450,645760,831130,792100,780410,778620,761e3,643620,650320,802640,805900,803960,800580,783660,648310,668150,825940,818650,816630,821e3,782790,657850,671660,817660,816020,821380,816280,800240,712510,648060,711170,709110,802240,792710,772260,691490,636050,649450,566120,651310,701910,702270,627880,605290,621710,744830,762830,765640,764140,648720,642430,786580,778790,780060,789170,772600,652160,648950,795360,802250,808010,801890,793490,669240,665310,814370,810880,814580,813950,802070,670450,674250,823010,820620,821400,820760,804300,681870,681460,831580,835600,835390,840770,810700,675170,680870,832e3,836790,845630,844560,821810,690310,683810,851150,848090,846480,858340,831290,696470,695540,866980,868190,861720,834530,706650,439140]],types:{y0:"line",y1:"line",y2:"line",y3:"line",x:"x"},names:{y0:"#0",y1:"#1",y2:"#2",y3:"#3"},colors:{y0:"#cb513a",y1:"#73c03a",y2:"#65b9ac",y3:"#4682b4"}}]},function(t,e,i){"use strict";i.r(e);var a=i(0);class s{constructor(t){this.chart=t,this.area=t.geometry.LabelX,this.data=t.data,this.textWidth=this.setTextWidth()}render(t,e,i){let a=Math.ceil(this.data.view.xAxis.length/4),s=this.area.width/this.data.view.xAxis.length;this.clear(),t.save(),t.beginPath(),t.font="12px sans-serif",t.fillStyle="rgb(155, 166, 174)","right"==i&&(e=-e),this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsStart?(t.fillText(this.data.view.xAxis[this.data.view.xAxis.length-1].short,this.area.width-this.textWidth,this.area.top+20),this.wrightTextToStart(t,e,a,s,i)):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsFinish?(t.fillText(this.data.view.xAxis[0].short,0,this.area.top+20),this.wrightTextToFinish(t,e,a,s,i)):this.wrightTextBetween(t,e,a,s,i)}wrightTextToStart(t,e,i,a,s){for(let s=0;s<this.data.view.xAxis.length;s++)s%i==0&&(t.font="12px sans-serif",t.fillStyle=`rgb(155, 166, 174, ${Math.abs(e/.1)||1})`,this.data.view.xAxis.length-i>=s&&t.fillText(this.data.view.xAxis[s].short,s*a+this.textWidth/2+a*(e||1),this.area.top+20))}wrightTextToFinish(t,e,i,a,s){for(let s=0;s<this.data.view.xAxis.length;s++)s%i==0&&(t.font="12px sans-serif",t.fillStyle=`rgb(155, 166, 174, ${Math.abs(e/.1)||1})`,s/i!=0&&t.fillText(this.data.view.xAxis[s].short,s*a+this.textWidth/2+a*(e||1),this.area.top+20))}wrightTextBetween(t,e,i,a,s){for(let s=0;s<this.data.view.xAxis.length;s++)s%i==0&&(t.font="12px sans-serif",t.fillStyle=`rgb(155, 166, 174, ${Math.abs(e/.1)||1})`,t.fillText(this.data.view.xAxis[s].short,s*a-this.textWidth/2+a*(e||1),this.area.top+20))}setTextWidth(){this.chart.chartCtx.save(),this.chart.chartCtx.font="12px sans-serif";let t=Math.ceil(this.chart.chartCtx.measureText(this.data.xAxis[0].short).width);return this.chart.chartCtx.restore(),t}update(t,e,i){"click"==i.type&&console.log(this)}clear(){this.chart.chartCtx.clearRect(this.area.left,this.area.top,this.area.width,this.area.height)}}class h{constructor(t){this.chart=t,this.area=t.geometry.ChartArea,this.data=t.data,this.svgPaths=[],this.maxValue=this.findMaxValue(),this.padding=0,this.moveDirection=null,this.localStepX=null,this.dots=[]}render(t){let e=this.findMaxValue();const i=e/this.maxValue,a=this.maxValue;this.data.oldFirstIndex=this.data.oldFirstIndex||this.data.firstIndex,this.maxValue=e;let s=0;if(t&&this.data.view.xAxis.length<100&&(this.moveDirection=t>0?"right":"left",s=.12),1==i){if(t&&this.data.view.xAxis.length<100){var h=()=>{Math.abs(s)>1||0==s||(this.drawChart(void 0,void 0,void 0,s,this.data.oldFirstIndex),t&&this.data.view.xAxis.length<100&&(s+=.12),requestAnimationFrame(h))};return void h()}this.drawChart()}let r=1,n=1;i>1?(r=i,n=2-i**.1):i<1&&(r=1,n=2-i**.1);var o=()=>{if(this.drawChart(r,i,a,s,this.data.oldFirstIndex),isFinite(i)&&0!=i){if(i>1){if(r<=1)return;r=r*n<1?1:r*n}else{if(!(i<1))return void Math.abs(s);if(r<=i)return;r=r/n<i?i:r/n}t&&this.data.view.xAxis.length<100&&(s+=.12),requestAnimationFrame(o)}};o()}renderLines(t,e){console.log(e),t.clearRect(this.area.left,this.area.top,this.area.width,this.area.height+this.area.top),t.save(),t.beginPath(),t.strokeStyle="#ddeaf3",this.drawLines(t,e),t.closePath(),t.stroke(),t.restore()}drawLines(t,e){t.moveTo(this.area.left,this.area.bottom),t.lineTo(this.area.right,this.area.bottom),t.moveTo(this.area.left,5*this.area.bottom/6),t.lineTo(this.area.right,5*this.area.bottom/6),t.moveTo(this.area.left,4*this.area.bottom/6),t.lineTo(this.area.right,4*this.area.bottom/6),t.moveTo(this.area.left,3*this.area.bottom/6),t.lineTo(this.area.right,3*this.area.bottom/6),t.moveTo(this.area.left,2*this.area.bottom/6),t.lineTo(this.area.right,2*this.area.bottom/6),t.moveTo(this.area.left,this.area.bottom/6),t.lineTo(this.area.right,this.area.bottom/6)}findDot(t,e){let i;return this.dots.forEach(e=>{e.x-this.data.firstIndex*this.stepX<t+2&&e.x-this.data.firstIndex*this.stepX>t-2&&(i=e)}),i}renderToolTips(t,e,i){t.clearRect(this.area.left,this.area.top,this.area.width,this.area.height+this.area.top);let a=this.findDot(e,i);if(a){t.clearRect(this.area.left,this.area.top,this.area.width,this.area.height+this.area.top),t.save(),t.beginPath(),t.strokeStyle="#ddeaf3",t.fillStyle="rgb(255,255,255, 0.98)",t.lineWidth=2,t.moveTo(a.x-this.data.firstIndex*this.stepX,this.area.top),t.lineTo(a.x-this.data.firstIndex*this.stepX,this.area.bottom),t.closePath(),t.stroke(),a.values.forEach(e=>{t.save(),t.beginPath(),t.strokeStyle=e.color,t.arc(a.x-this.data.firstIndex*this.stepX,e.y,3,0,2*Math.PI),t.fill(),t.closePath(),t.stroke(),t.restore()});let s=150,h=22*(a.values.length+1);t.beginPath(),e>=this.area.width-s&&(i>=this.area.height/2+this.area.top&&this.fillInfoRect(t,{x:a.x-this.data.firstIndex*this.stepX-s,y:this.area.top,width:s,height:h},a),i<this.area.height/2+this.area.top&&this.fillInfoRect(t,{x:a.x-this.data.firstIndex*this.stepX-s,y:this.area.bottom-h,width:s,height:h},a)),e<this.area.width-s&&(i>=this.area.height/2+this.area.top&&this.fillInfoRect(t,{x:a.x-this.data.firstIndex*this.stepX,y:this.area.top,width:s,height:h},a),i<this.area.height/2+this.area.top&&this.fillInfoRect(t,{x:a.x-this.data.firstIndex*this.stepX,y:this.area.bottom-h,width:s,height:h},a)),t.stroke(),t.closePath(),t.restore()}}fillInfoRect(t,e,i){t.fillRect(e.x,e.y,e.width,e.height),t.rect(e.x,e.y,e.width,e.height),t.save(),t.fillStyle="rgb(0,0,0)",t.font="12px sans-serif",t.fillText(i.xAxis.full,e.x+10,e.y+20),i.values.forEach((i,a)=>{t.fillStyle=i.color,t.fillText(i.name+": "+i.value,e.x+10,e.y+20+20*(a+1))}),t.restore()}update(t,e,i){"mousemove"==i.type&&this.renderToolTips(this.chart.dynamicCtx,t,e),"click"==i.type&&console.log(this.chart)}drawChart(t,e,i,a,s){this.clear(),this.chart.LabelX.render(this.chart.chartCtx,a,this.moveDirection),this.renderLines(this.chart.staticCtx,t,this.moveDirection),this.makeSvgPath(t,e,i,a,s),this.svgPaths.forEach(t=>{this.chart.chartCtx.save(),this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsStart&&("right"==this.moveDirection?this.chart.chartCtx.translate(-this.data.oldFirstIndex*this.stepX-a*this.stepX+this.stepX,0):this.chart.chartCtx.translate(-this.data.oldFirstIndex*this.stepX+a*this.stepX,0)),this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDraggins&&("right"==this.moveDirection?this.chart.chartCtx.translate(-this.data.firstIndex*this.stepX-a*this.stepX,0):this.chart.chartCtx.translate(-this.data.firstIndex*this.stepX+a*this.stepX-this.stepX,0)),this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsFinish,this.chart.chartCtx.translate(-this.data.firstIndex*this.stepX,0),this.chart.chartCtx.lineWidth=3,this.chart.chartCtx.strokeStyle=t.strokeStyle,this.chart.chartCtx.lineJoin="round",this.chart.chartCtx.stroke(t),this.chart.chartCtx.restore()})}makeSvgPath(t,e,i,a){this.svgPaths=[],this.dots=[];let s,h=this.data.firstIndex;this.stepX=this.area.width/this.data.view.xAxis.length,this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsStart?this.setVarsForStart(a):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDraggins?this.setVarsForDrag(a):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsFinish&&this.setVarsForFinish(a),s=e&&e>1?this.area.height/this.maxValue*t:e&&e<1?this.area.height/i/t:this.area.height/this.maxValue;for(let t=0;t<this.data.view.datasets.length;t++){let e=new Path2D;this.svgPaths.push(e),e.strokeStyle=this.data.view.datasets[t].color;let i=this.data.view.datasets[t].data;for(let a=0;a<i.length;a++)0==a&&this.addDrawToLeft(h,e,s,t),this.setLoopX(e,i,a,h,t,s),a==i.length-1&&this.addDrawToRight(h,e,s,t,a)}}setVarsForStart(t){"right"==this.moveDirection?(this.stepX=this.area.width/this.data.view.xAxis.length,this.localStepX=this.area.width/(this.data.view.xAxis.length-t)):(this.stepX=this.area.width/this.data.view.xAxis.length,this.localStepX=this.area.width/(this.data.view.xAxis.length-1+t))}setVarsForDrag(t){this.moveDirection,this.stepX=this.area.width/this.data.view.xAxis.length}setVarsForFinish(t){"right"==this.moveDirection?this.stepX=this.area.width/(this.data.view.xAxis.length-1+t):this.stepX=this.area.width/(this.data.view.xAxis.length+1-t)}setLoopX(t,e,i,a,s,h){let r,n,o;if(r=e[i],o=Math.ceil(this.area.top+(this.area.height-r*h)),n=this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsStart?Math.ceil(a*this.stepX*2+i*this.localStepX):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDraggins?Math.ceil(a*this.stepX*2+i*this.stepX):(this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsFinish,Math.ceil((a+i)*this.stepX)),t.lineTo(n,o),0==s){let t=this.data.view.datasets.map(t=>({value:t.data.filter((t,e)=>e==i)[0],color:t.color,name:t.name,y:o}));this.dots.push({x:n,y:o,xAxis:this.data.view.xAxis[i],values:t})}else 0!=s&&(this.dots[i].values[s].y=o)}addDrawToLeft(t,e,i,a){let s,h,r;this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsStart?(s=this.data.datasets[a].data[this.data.firstIndex-1],r=Math.ceil(this.area.top+(this.area.height-s*i)),h=Math.ceil(t*this.stepX*2-this.localStepX),e.moveTo(h,r)):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDraggins?(s=this.data.datasets[a].data[this.data.firstIndex-1],r=Math.ceil(this.area.top+(this.area.height-s*i)),h=Math.ceil(this.data.firstIndex*this.stepX-1*this.stepX),e.lineTo(h,r)):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsFinish&&(s=this.data.datasets[a].data[this.data.firstIndex-1],r=Math.ceil(this.area.top+(this.area.height-s*i)),h=Math.ceil(this.data.firstIndex*this.stepX-1*this.stepX),e.lineTo(h,r))}addDrawToRight(t,e,i,a,s){let h,r,n;this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsStart?(h=this.data.datasets[a].data[this.data.lastIndex+1],n=Math.ceil(this.area.top+(this.area.height-h*i)),r=Math.ceil(t*this.stepX*2+(s+1)*this.localStepX),e.lineTo(r,n)):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDraggins?(h=this.data.datasets[a].data[this.data.lastIndex+1],n=Math.ceil(this.area.top+(this.area.height-h*i)),r=Math.ceil(t*this.stepX*2+(1+s)*this.stepX),e.lineTo(r,n),h=this.data.datasets[a].data[this.data.lastIndex+2],n=Math.ceil(this.area.top+(this.area.height-h*i)),r=Math.ceil(t*this.stepX*2+(2+s)*this.stepX),e.lineTo(r,n)):this.chart.ChartPreview&&this.chart.ChartPreview.pad.isDragginsFinish&&(h=this.data.datasets[a].data[this.data.lastIndex+1],n=Math.ceil(this.area.top+(this.area.height-h*i)),r=Math.ceil((t+s+1)*this.stepX),e.lineTo(r,n))}clear(){this.chart.chartCtx.clearRect(this.area.left,this.area.top,this.area.width,this.area.height+this.area.top)}findMaxValue(){let t=[];return this.data.view?this.data.view.datasets.forEach(e=>{t.push(Math.max(...e.data))}):this.data.datasets.forEach(e=>{t.push(Math.max(...e.data))}),Math.max(...t)}}class r{constructor(t){this.chart=t,this.area=t.geometry.ChartPreview,this.data=t.data,this.start=this.area.width-.3*this.area.width,this.finish=this.area.width,this.width=this.finish-this.start,this.border=8,this.borderMiss=5,this.minWidth=18,this.isDragginsStart=!1,this.isDragginsFinish=!1,this.isDraggins=!1,this.init()}init(){this.setViewData(),this.makePad(this.start,this.width)}update(t,e,i){"touchstart"!=i.type&&"mousedown"!=i.type||(t<this.start+this.border+this.borderMiss&&t>this.start-this.borderMiss?this.isDragginsStart=!0:t<this.finish+this.borderMiss&&t>this.finish-this.border-this.borderMiss?this.isDragginsFinish=!0:this.isDraggins=!0),"touchend"!=i.type&&"mouseup"!=i.type||(this.isDragginsStart=!1,this.isDragginsFinish=!1,this.isDraggins=!1),"touchmove"!=i.type&&"mousemove"!=i.type||this.changePadSize(t,e,i.movementX)}changePadSize(t,e,i){this.isDragginsStart&&(this.start=t,t>this.finish-this.minWidth&&(this.start=this.finish-this.minWidth),this.width=this.finish-this.start,this.makePad(this.start,this.width,"scalling",i)),this.isDragginsFinish&&(this.finish=t,t<this.start+this.minWidth&&(this.finish=this.start+this.minWidth),this.width=this.finish-this.start,this.makePad(this.start,this.width,"scalling",i)),this.isDraggins&&this.replacePad(t,e,i)}replacePad(t,e,i){this.start=t-Math.floor(this.width/2),this.start<this.area.left&&(this.start=0),this.finish=this.start+this.width,this.finish>this.area.right&&(this.finish=this.area.right,this.start=this.finish-this.width),this.makePad(this.start,this.width,"replace",i)}setViewData(t,e){this.data.oldFirstIndex=this.data.firstIndex,this.data.oldLastIndex=this.data.lastIndex,this.data.firstPixel=this.start,this.data.lastPixel=this.finish;let i=this.data.lastIndex-this.data.firstIndex,a=Math.floor(this.start/this.area.width*this.data.xAxis.length);"replace"==t?(this.data.firstIndex=a>0?a:0,this.data.lastIndex=this.data.firstIndex+i):(this.data.firstIndex=a>0?a:0,a=Math.floor(this.finish/this.area.width*this.data.xAxis.length),this.data.lastIndex=a<this.data.xAxis.length?a:this.data.xAxis.length),this.data.view={datasets:this.data.datasets.map(t=>({data:t.data.slice(this.data.firstIndex,this.data.lastIndex+1),color:t.color,name:t.name})),xAxis:this.data.xAxis.slice(this.data.firstIndex,this.data.lastIndex+1)},this.data.oldFirstIndex==this.data.firstIndex&&this.data.oldLastIndex==this.data.lastIndex||(this.chart.ChartArea.render(e),this.data.oldFirstIndex=this.data.firstIndex,this.data.oldLastIndex=this.data.lastIndex)}makePad(t,e,i,a){this.chart.dynamicCtx.save(),this.chart.dynamicCtx.clearRect(this.area.left,this.area.top,this.area.width,this.area.height),this.chart.dynamicCtx.fillStyle="rgb(245,249,251, 0.7)",this.chart.dynamicCtx.fillRect(this.area.left,this.area.top,this.area.width,this.area.height),this.chart.dynamicCtx.fillStyle="rgb(221,234,243, 0.7)",this.chart.dynamicCtx.fillRect(t,this.area.top,e,this.area.height),this.chart.dynamicCtx.fillStyle="#fff",this.chart.dynamicCtx.clearRect(t+this.border,this.area.top+1,e-2*this.border,this.area.height-2),this.chart.dynamicCtx.restore(),this.setViewData(i,a)}}class n{constructor(t){this.chart=t,this.area=t.geometry.ChartPreview,this.data=t.data,this.pad=new r(t),this.svgPaths=[]}update(t,e,i){this.pad.update(t,e,i)}clear(){this.chart.staticCtx.clearRect(this.area.left,0,this.area.width,this.area.bottom)}findMaxValue(){let t=[];return this.data.datasets.forEach(e=>{t.push(Math.max(...e.data))}),Math.max(...t)}drawChart(t,e,i){this.clear(),this.chart.ChartArea.renderLines(this.chart.staticCtx),this.makeSvgPath(t,e,i),this.svgPaths.forEach(t=>{this.chart.staticCtx.save(),this.chart.staticCtx.translate(-this.data.firstPixel*this.scale,0),this.chart.staticCtx.strokeStyle=t.strokeStyle,this.chart.staticCtx.lineJoin="round",this.chart.staticCtx.stroke(t),this.chart.staticCtx.restore()})}render(){let t=this.findMaxValue();const e=t/this.maxValue,i=this.maxValue;if(this.maxValue=t,1==e)return void this.drawChart();let a=1,s=1;e>1?(a=e,s=2-e**.1):e<1&&(a=1,s=2-e**.1);var h=()=>{if(this.drawChart(a,e,i),e>1){if((a=a*s<1?1:a*s)<=1)return}else{if(!(e<1))return;if((a=a/s<e?e:a/s)<=e)return}requestAnimationFrame(h)};h()}makeSvgPath(t,e,i){this.svgPaths=[];let a=(this.area.height-10)/this.maxValue;e&&e>1&&(a=(this.area.height-10)/this.maxValue*t),e&&e<1&&(a=(this.area.height-10)/i/t);let s=this.area.width/(this.data.xAxis.length-1);for(let t in this.data.datasets){let e=new Path2D;this.svgPaths.push(e);for(let i in this.data.datasets[t].data){let h=this.data.datasets[t].data[i],r=Math.ceil(0+i*s),n=Math.ceil(this.area.top+(this.area.height-h*a));0==i?e.moveTo(r,n):e.lineTo(r,n)}e.strokeStyle=this.data.datasets[t].color}}}class o{constructor(t){this.chart=t,this.area=t.geometry.Buttons,this.data=t.data,this.height=40,this.buttons={}}countOnCharts(){return this.data.buttons.filter(t=>t.active).length}update(t,e,i){if("click"==i.type){let i=this.findButton(t,e);if(i)if(this.data.buttons.filter(t=>t.text==i)[0].active){if(1==this.countOnCharts())return;this.offDataset(i)}else this.onDataset(i)}}findButton(t,e){for(const i in this.buttons){const a=this.buttons[i];if(a.left<t&&a.right>t&&a.bottom>e&&a.top<e)return i}}offDataset(t){this.data.buttons.filter(e=>e.text==t)[0].active=!1,this.data.view={datasets:this.data.view.datasets.filter(e=>e.name!==t),xAxis:this.data.view.xAxis},this.data.datasets=this.data.datasets.filter(e=>e.name!==t),this.chart.ChartPreview.render(this.chart.staticCtx),this.chart.ChartArea.render()}onDataset(t){this.data.buttons.filter(e=>e.text==t)[0].active=!0;let e=this.data.source.datasets.filter(e=>e.name==t)[0];this.data.view.datasets.push({data:e.data.slice(this.data.firstIndex,this.data.lastIndex),color:e.color,name:e.name}),this.data.datasets.push(e),this.chart.ChartPreview.render(this.chart.staticCtx),this.chart.ChartArea.render()}clear(){this.ctx.clearRect(this.area.left,this.area.top,this.area.width,this.area.height)}makeButtons(t){t.save(),this.data.buttons.forEach((e,i)=>{t.font="16px serif";let a=Math.ceil(t.measureText(e.text).width);this.makeButton(t,this.area.left+20+6*a*i,this.area.top+this.area.height/2-this.height/2,this.height,this.height/2,e.text,e.color)})}makeButton(t,e,i,a,s,h,r){t.fillStyle="#000";let n=Math.ceil(t.measureText(h).width)+3*s;t.fillText(h,e+2*s,i+a/2+4),this.makeWrapButton(t,e,i,n,a,s,h),this.makeIcon(t,e+s,i+a/2,r)}makeWrapButton(t,e,i,a,s,h,r){t.beginPath(),t.strokeStyle="#ddeaf3",t.moveTo(e+a/2,i),t.arc(e+a-h,i+s/2,h,-Math.PI/2,Math.PI/2),t.arc(e+h,i+s/2,h,Math.PI/2,-Math.PI/2),this.buttons[r]={width:a,height:s,top:i,bottom:i+s,right:e+a,left:e},t.closePath(),t.stroke()}makeIcon(t,e,i,a){t.beginPath(),t.arc(e,i,10,0,2*Math.PI),t.fillStyle=a||"#ccc",t.fill(),t.stroke(),t.closePath(),t.restore()}render(t){this.makeButtons(t)}}class d{constructor(t){this.chart=t,this.area=t.geometry.SwitchMode,this.data=t.data}update(){this.clear()}clear(){this.chart.staticCtx.clearRect(this.area.left,this.area.top,this.area.width,this.area.height)}render(t){t.rect(this.area.left+2,this.area.top+2,this.area.width-4,this.area.height-4),t.stroke()}}class l{constructor(t){this.chart=t,t.canvas.addEventListener("click",this.event.bind(this),!1),t.canvas.addEventListener("mousedown",this.event.bind(this),!1),t.canvas.addEventListener("mouseup",this.event.bind(this),!1),t.canvas.addEventListener("mousemove",this.event.bind(this),!1),t.canvas.addEventListener("touchstart",this.event.bind(this),!1),t.canvas.addEventListener("touchend",this.event.bind(this),!1),t.canvas.addEventListener("touchmove",this.event.bind(this),!1),t.canvas.addEventListener("mouseleave",this.event.bind(this),!1),t.canvas.addEventListener("mouseout",this.event.bind(this),!1)}event(t){if(~t.type.indexOf("touch")){if(!t.touches.length)return this.spreader(this.chart.geometry,null,null,t);let e=(t.target||t.srcElement).getBoundingClientRect(),i=Math.ceil(t.touches[0].clientX-e.left),a=Math.ceil(t.touches[0].clientY-e.top);this.spreader(this.chart.geometry,i,a,t)}else{let e=(t.target||t.srcElement).getBoundingClientRect(),i=Math.ceil(t.clientX-e.left),a=Math.ceil(t.clientY-e.top);this.spreader(this.chart.geometry,i,a,t)}}spreader(t,e,i,a){let s;for(const a in t){const h=t[a];h.left<e&&h.right>e&&h.bottom>i&&h.top<i&&(s=a)}s&&this.chart[s].update(e,i,a)}}var c=function(t,e){let i=r(null,.6),a=r(i,.07),s=r(a,.08),h=r(s,.15);return{ChartArea:i,LabelX:a,ChartPreview:s,Buttons:h,SwitchMode:r(h,.1)};function r(i,a){return{width:t,height:e*a,top:i?i.bottom:0,bottom:i?i.bottom+e*a:e*a,right:t,left:0}}},x=function(t){let e=t.columns[0].slice(1).map(t=>new Date(t)).map(t=>({short:t.toDateString().split(" ").slice(1,3).join(" "),full:t.toDateString()})),i=t.columns.map((e,i)=>({data:e.slice(1),color:t.colors[t.columns[i][0]],name:t.names[t.columns[i][0]]})).slice(1),a=[];for(const e in t.names)t.names.hasOwnProperty(e)&&a.push({text:t.names[e],color:t.colors[e],active:!0});return{xAxis:e,datasets:i,buttons:a,source:{xAxis:e,datasets:i},sourceTemp:t}};class f{constructor(t,e){this.id=e,this.width=document.body.offsetWidth>480?480:document.body.offsetWidth,this.height=1.5*this.width,this.root=this.makeRoot(),this.data=x(t),this.geometry=c(this.width,this.height),this.staticCtx=this.makeStaticCtx(),this.chartCtx=this.makeChartCtx(),this.canvas=this.makeCanvas(),this.dynamicCtx=this.canvas.getContext("2d"),this.ChartArea=new h(this),this.LabelX=new s(this),this.ChartPreview=new n(this),this.Buttons=new o(this),this.SwitchMode=new d(this),this.EventController=new l(this),console.log(this)}makeRoot(){let t=document.createElement("div");return document.querySelector("#root").appendChild(t),t.style.position="relative",t.style.width=this.width+30+"px",t.style.height=this.height+"px",t.style.display="inline-block",t.id="chart_"+this.id,t}makeTitle(){}makeStaticCtx(){let t=document.createElement("canvas");return t.id="chartLayout_"+this.id,t.width=this.width,t.height=this.height,t.style.position="absolute",t.style.top="30px",t.style.left=0,this.root.appendChild(t),t.getContext("2d")}makeChartCtx(){let t=document.createElement("canvas");return t.id="dynamicLayout_"+this.id,t.width=this.width,t.height=this.height,t.style.position="absolute",t.style.top="30px",t.style.left=0,this.root.appendChild(t),t.getContext("2d")}makeCanvas(){let t=document.createElement("canvas");return t.id="staticLayout_"+this.id,t.width=this.width,t.height=this.height,t.style.position="absolute",t.style.top="30px",t.style.left=0,this.root.appendChild(t),t}render(){this.ChartPreview.render(this.staticCtx),this.Buttons.render(this.staticCtx)}}console.time("start"),a.forEach((t,e)=>{new f(t,e).render()}),console.timeEnd("start")}]);